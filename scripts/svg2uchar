#!/usr/bin/env bash

# svg2uchar - Convert SVG to a distinctive Unicode character icon
# Enhanced version with better visual representation
# Usage: svg2uchar input.svg [size=16]

input_file="$1"
[ -z "$input_file" ] && { echo "Usage: $0 input.svg [size=16]"; exit 1; }
size="${2:-16}"  # Default size 16x16

# Check if ImageMagick is installed
if ! command -v convert &> /dev/null; then
    echo "Error: ImageMagick is required but not installed."
    echo "Please install it with: sudo apt-get install imagemagick"
    exit 1
fi

# Create a temporary file for the resized image
temp_png=$(mktemp /tmp/svg2uchar_XXXXXX.png)
trap 'rm -f "$temp_png"' EXIT

# Convert SVG to grayscale and resize to 4x4 pixels
convert "$input_file" -background none -resize "${size}x${size}!" -colorspace gray -depth 8 "$temp_png"

# Get pixel data and calculate brightness
pixel_data=$(convert "$temp_png" -resize '4x4!' -depth 8 txt:- 2>/dev/null | 
             grep -Eo '\([0-9]+,[0-9]+,[0-9]+\)' | 
             tr -d '()' | 
             awk -F, '{printf "%d\n", ($1 + $2 + $3) / 3}')

# Determine active dots based on brightness
braille_bits=0
brightness_threshold=128

# Braille dot positions (1-8):
# 1 4
# 2 5
# 3 6
# 7 8

# Map 4x4 grid to Braille pattern (2x4 dots)
for i in {0..15}; do
    # Get brightness value (0-255)
    bright=$(echo "$pixel_data" | sed -n "$((i+1))p")
    
    # If pixel is dark enough, set corresponding Braille dot
    if [ "$bright" -lt $brightness_threshold ]; then
        # Map 4x4 position to Braille dot (1-8)
        case $i in
            0)  dot=1;;  4)  dot=4;;
            1)  dot=1;;  5)  dot=4;;
            2)  dot=2;;  6)  dot=5;;
            3)  dot=2;;  7)  dot=5;;
            8)  dot=3;; 12)  dot=6;;
            9)  dot=3;; 13)  dot=6;;
            10) dot=7;; 14)  dot=8;;
            11) dot=7;; 15)  dot=8;;
        esac
        braille_bits=$((braille_bits | (1 << (dot-1))))
    fi
done

# Calculate Unicode code point (U+2800 + braille_bits)
codepoint=$((0x2800 + braille_bits))

# Output the character
hex=$(printf '%04x' "$codepoint")
if [ "$(uname)" = "Darwin" ]; then
    # macOS uses different syntax for Unicode escapes
    python -c "print(chr(0x$hex), end='')"
    echo
else
    printf "\\U$hex\n"
fi

exit 0



# Define Unicode block characters and their patterns
# Each character is represented by 4x2 blocks (8 bits total)
# Format: "char:binary_pattern"
blocks=(
    "█:11111111"   # Full block
    "▀:11110000"   # Upper half block
    "▄:00001111"   # Lower half block
    "▌:11110000"   # Left half block
    "▐:00001111"   # Right half block
    "▘:11000000"   # Top-left quadrant
    "▝:00110000"   # Top-right quadrant
    "▖:00001100"   # Bottom-left quadrant
    "▗:00000011"   # Bottom-right quadrant
    "▚:10011001"   # Diagonal cross
    "▞:01100110"    # Reverse diagonal cross
    "▙:11111100"    # Top-left and bottom-right blocks
    "▛:11110011"    # Top and left blocks
    "▜:11001111"    # Top and right blocks
    "▟:00111111"    # Bottom and right blocks
    "▙:11111100"    # Top and bottom blocks
    "▀:11110000"    # Top half block (same as upper half)
    "▄:00001111"    # Bottom half block (same as lower half)
    "▌:11110000"    # Left half block (same as left half)
    "▐:00001111"    # Right half block (same as right half)
    "■:11111111"    # Full block (alternative)
    "□:00000000"    # Empty block (for contrast)
    "•:00011000"    # Bullet (center dot)
    "·:00011000"    # Middle dot (same as bullet)
    "○:00111100"    # Circle
)

# If we couldn't get image data, return a default character
if [ -z "$data" ] || [ ${#data} -lt 8 ]; then
    echo "•"
    exit 0
fi

# Take first 8 bits (for 8x1 image) or first 8 rows (for 4x2 image)
data=${data:0:8}

# Find the best matching block character
best_char="•"  # Default to bullet point
best_score=0

for block in "${blocks[@]}"; do
    IFS=':' read -r char pattern <<< "$block"
    
    # Calculate similarity score
    score=0
    for ((i=0; i<8; i++)); do
        if [ "${data:$i:1}" = "${pattern:$i:1}" ]; then
            ((score++))
        fi
    done
    
    # Update best match if this is better
    if [ $score -gt $best_score ]; then
        best_score=$score
        best_char="$char"
    fi
done

# Output the best matching character
echo "$best_char"
